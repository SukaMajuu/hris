openapi: 3.0.0
info:
    title: HRIS API
    description: API documentation for Human Resource Information System
    version: 1.0.0
    contact:
        name: SukaMaju
servers:
    - url: https://hris-backend-sukamaju123.azurewebsites.net/api
      description: Production server
    - url: http://localhost:8000/api
      description: Development server

components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
    schemas:
        User:
            type: object
            properties:
                id:
                    type: integer
                    example: 1
                name:
                    type: string
                    example: "John Doe"
                email:
                    type: string
                    format: email
                    example: "john.doe@example.com"
                role:
                    type: string
                    enum: [admin, hr, employee]
                    example: "employee"
                status:
                    type: string
                    enum: [active, inactive]
                created_at:
                    type: string
                    format: date-time

        Employee:
            type: object
            properties:
                id:
                    type: integer
                first_name:
                    type: string
                last_name:
                    type: string
                birth_date:
                    type: string
                    format: date
                gender:
                    type: string
                phone:
                    type: string
                address:
                    type: string
                hire_date:
                    type: string
                    format: date
                department_id:
                    type: integer
                position_id:
                    type: integer
                employment_status:
                    type: string
                    enum: [permanent, contract, probation]

        Attendance:
            type: object
            properties:
                id:
                    type: integer
                employee_id:
                    type: integer
                date:
                    type: string
                    format: date
                clock_in:
                    type: string
                    format: time
                clock_out:
                    type: string
                    format: time
                status:
                    type: string
                    enum: [present, absent, late]
                location:
                    type: string
                notes:
                    type: string

        OvertimeRequest:
            type: object
            properties:
                id:
                    type: integer
                employee_id:
                    type: integer
                date:
                    type: string
                    format: date
                start_time:
                    type: string
                    format: time
                end_time:
                    type: string
                    format: time
                duration:
                    type: number
                reason:
                    type: string
                status:
                    type: string
                    enum: [pending, approved, rejected]

paths:
    /auth/login:
        post:
            tags: [Authentication]
            summary: User login
            security: []
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                password:
                                    type: string
                                    format: password
            responses:
                200:
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    token:
                                        type: string
                                    user:
                                        $ref: "#/components/schemas/User"

    /employees:
        get:
            tags: [Employees]
            summary: Get all employees
            parameters:
                - in: query
                  name: department_id
                  schema:
                      type: integer
                - in: query
                  name: status
                  schema:
                      type: string
            responses:
                200:
                    description: List of employees
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Employee"

        post:
            tags: [Employees]
            summary: Create new employee
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Employee"
            responses:
                201:
                    description: Employee created

    /employees/{id}:
        get:
            tags: [Employees]
            summary: Get employee by ID
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            responses:
                200:
                    description: Employee details
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Employee"

    /attendance:
        post:
            tags: [Attendance]
            summary: Clock in/out
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                type:
                                    type: string
                                    enum: [in, out]
                                location:
                                    type: string
            responses:
                200:
                    description: Attendance recorded

        get:
            tags: [Attendance]
            summary: Get attendance records
            parameters:
                - in: query
                  name: start_date
                  schema:
                      type: string
                      format: date
                - in: query
                  name: end_date
                  schema:
                      type: string
                      format: date
                - in: query
                  name: employee_id
                  schema:
                      type: integer
            responses:
                200:
                    description: List of attendance records
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Attendance"

    /overtime:
        post:
            tags: [Overtime]
            summary: Submit overtime request
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/OvertimeRequest"
            responses:
                201:
                    description: Overtime request submitted

        get:
            tags: [Overtime]
            summary: Get overtime requests
            parameters:
                - in: query
                  name: status
                  schema:
                      type: string
                      enum: [pending, approved, rejected]
                - in: query
                  name: employee_id
                  schema:
                      type: integer
            responses:
                200:
                    description: List of overtime requests
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/OvertimeRequest"

    /overtime/{id}/approve:
        post:
            tags: [Overtime]
            summary: Approve/reject overtime request
            parameters:
                - in: path
                  name: id
                  required: true
                  schema:
                      type: integer
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                status:
                                    type: string
                                    enum: [approved, rejected]
                                notes:
                                    type: string
            responses:
                200:
                    description: Overtime request updated

security:
    - bearerAuth: []
